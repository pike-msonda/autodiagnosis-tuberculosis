import numpy as np
from tensorflow.python.keras import backend as K
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.layers import Flatten, Dense, Dropout
from tensorflow.python.keras.applications.resnet50 import ResNet50, preprocess_input
from tensorflow.python.keras.optimizers import Adam
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator


TRAIN_DATASET_PATH  = 'D:\Data/train/usa'
TEST_DATASET_PATH  = 'D:\Data/test/usa'

IMAGE_SIZE    = (227, 227)
CROP_LENGTH   = 227
NUM_CLASSES   = 2
BATCH_SIZE    = 8  # try reducing batch size or freeze more layers if your GPU runs out of memory
FREEZE_LAYERS = 2  # freeze the first this many layers for training
NUM_EPOCHS    = 20
WEIGHTS_FINAL = 'model-cropped-final.h5'


def random_crop(img, random_crop_size):
    # Note: image_data_format is 'channel_last'
    assert img.shape[2] == 3
    height, width = img.shape[0], img.shape[1]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[y:(y+dy), x:(x+dx), :]


def crop_generator(batches, crop_length):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        for i in range(batch_x.shape[0]):
            batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))
        yield (batch_crops, batch_y)


def get_train_datagen():
    return ImageDataGenerator(preprocessing_function=preprocess_input,
                                    # rotation_range=40,
                                    width_shift_range=0.2,
                                    height_shift_range=0.2,
                                    shear_range=0.2,
                                    zoom_range=0.2,
                                    # channel_shift_range=10,
                                    horizontal_flip=True,
                                    vertical_flip=True,
                                    fill_mode='nearest')

def get_train_batches():
    return get_train_datagen().flow_from_directory(TRAIN_DATASET_PATH,
                                                  target_size=IMAGE_SIZE,
                                                  interpolation='bicubic',
                                                  class_mode='categorical',
                                                  shuffle=True,
                                                  batch_size=BATCH_SIZE)

def get_validation_datagen():
    return ImageDataGenerator(preprocessing_function=preprocess_input)

def get_validation_batches():
    return get_validation_datagen().flow_from_directory(TEST_DATASET_PATH,
                                                  target_size=IMAGE_SIZE,
                                                  interpolation='bicubic',
                                                  class_mode='categorical',
                                                  shuffle=False,
                                                  batch_size=BATCH_SIZE)
def get_train_cropped_batches():
    return crop_generator(get_train_batches(), CROP_LENGTH)

def get_validation_cropped_batches():
    return crop_generator(get_validation_batches(), CROP_LENGTH)

